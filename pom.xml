<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.meg</groupId>
    <artifactId>Shop_Maven_Postgres</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--
   loads all the default configurations required for the basic spring boot applications.
   The parent tag tells Maven that we'd like to use another pom to encapsulate ours i.e inherit various properties and tags from Spring Boot.
   Mainly it's there to set things up easily. one of nicest features is that you don't have to include version numbers of Spring Boot libraries in your pom - it will figure them out for you!
   -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.3.RELEASE</version>
    </parent>

    <!--
    <properties>
        <java.version>1.8</java.version>
        <h2.version>1.4.187</h2.version>
    </properties>
    -->

    <properties>
        <appengine.app.appId>shop-maven-postgres</appengine.app.appId>
        <appengine.app.version>1</appengine.app.version>
        <appengine.target.version>1.9.48</appengine.target.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <cloudsql.url>jdbc:google:postgresql://your-instance-name/demo?user=root</cloudsql.url>
        <cloudsql.url.dev>jdbc:mysql://localhost/demo?user=root</cloudsql.url.dev>
    </properties>



        <!--
            INSTANCE_CONNECTION_NAME from Cloud Console > SQL > Instance Details > Properties
            or `gcloud sql instances describe <instance> | grep connectionName`
        -->
        <!--
        <java.version>1.8</java.version>
        <INSTANCE_CONNECTION_NAME>Project:Region:Instance</INSTANCE_CONNECTION_NAME>
        <user>root</user>
        <password>password</password>
        <database>sqldemo</database>
        <sqlURL>jdbc:postgresql://google/${database}?useSSL=false&amp;socketFactoryArg=${INSTANCE_CONNECTION_NAME}&amp;socketFactory=com.google.cloud.sql.postgres.SocketFactory&amp;user=${user}&amp;password=${password}</sqlURL>
    </properties>
-->

    <!--dependencies is just a fancy way of telling Maven "Please download these JARs into my project's classpath"-->
    <dependencies>

        <!--
            Spring Boot comes with one-stop-shop package called Starters that include everything you need for a ready-made application
            These are what you typically see in the Spring Initialzr with all the dependencies you can wire in
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>

        <!--dd JPA support will download the files required for spring data jpa.-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!--proper database drivers -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.4-1206-jdbc42</version>
        </dependency>

        <!--Add typical dependencies for a web application required because it is web based application to expose the REST endpoints-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Add freemarker template support -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>

        <!-- Add Hikari Connection Pooling support -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
        </dependency>

        <!--H2 database support [for running with local profile]-->
        <!--
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2.version}</version>
        </dependency>
        -->

        <!--Add MySQL database support [for running with PRODUCTION profile]-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!--The spring-boot-starter-test is the primary dependency that contains the majority of elements required for tests.-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <version>1.5.3.RELEASE</version>
        </dependency>

        <!--
        Security here it goes
        Once the spring-boot-starter-security dependency on the classpath of the application â€“ Basic Authentication is enabled by default.

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        -->

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.5</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!---SECURITY -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>

        <!--ACTUATOR-->
        <!--Helps you manage and monitor your application-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.8</version>
            <scope>provided</scope>
        </dependency>

        <!--Caching dependencies-->
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>2.7.2</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-redis</artifactId>
            <version>1.7.4.RELEASE</version>
        </dependency>


        <!--ModelMapper -->
        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
            <version>0.7.4</version>
        </dependency>

        <!--
         Socket factory for the Postgres JDBC driver that allows a user with the appropriate permissions
         to connect to a Cloud SQL database without having to deal with IP whitelisting or SSL certificates manually
        -->
        <dependency>
            <groupId>com.google.cloud.sql</groupId>
            <artifactId>postgres-socket-factory</artifactId>
            <version>1.0.3</version>
        </dependency>

    </dependencies>
    <build>
        <plugins>
            <plugin>
                <!--
                Include if you want to make an executable jar[FAT JAR which
                includes all dependencies along with sprinboot loader] that you can run on
                    commandline using java -jar NAME
                    -->
                <!--
                This makes running your app simple: just type
                mvn spring-boot:run
                -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!--To develop and deploy your application-->
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>appengine-maven-plugin</artifactId>
                <version>1.3.1</version>
            </plugin>

            <!--To test your application quickly without creating a WAR file, use-->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.3.7.v20160115</version>
            </plugin>

        </plugins>
    </build>


</project>